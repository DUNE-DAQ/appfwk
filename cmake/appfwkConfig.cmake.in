
@PACKAGE_INIT@

include(CMakeFindDependencyMacro)

find_dependency(Boost COMPONENTS program_options)

find_dependency(cetlib)
find_dependency(folly)
find_dependency(ers)
find_dependency(logging)
find_dependency(cmdlib)
find_dependency(rcif)
find_dependency(opmonlib)
find_dependency(nlohmann_json)
find_dependency(Pistache)
find_dependency(iomanager)
find_dependency(okssystem)
find_dependency(oksdbinterfaces)
find_dependency(coredal)
find_dependency(appdal)

# Figure out whether or not this dependency is an installed package or
# in repo form

if (EXISTS ${CMAKE_SOURCE_DIR}/@PROJECT_NAME@)

message(STATUS "Project \"@PROJECT_NAME@\" will be treated as repo (found in ${CMAKE_SOURCE_DIR}/@PROJECT_NAME@)")
add_library(appfwk::appfwk ALIAS appfwk)

set(@PROJECT_NAME@_DAQSHARE "${CMAKE_CURRENT_LIST_DIR}")

else()

message(STATUS "Project \"@PROJECT_NAME@\" will be treated as installed package (found in ${CMAKE_CURRENT_LIST_DIR})")
set_and_check(targets_file ${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake)
include(${targets_file})

# From 'appfwk/lib64/appfwk/cmake/<config>.cmake' to 'appfwk/share/schema/'
set(@PROJECT_NAME@_DAQSHARE "${CMAKE_CURRENT_LIST_DIR}/../../../share")

endif()

check_required_components(@PROJECT_NAME@)
